{
  description = "A declarative Nix config";
  outputs = inputs @ {
    self,
    nixpkgs,
    nixpkgs-unstable,
    ...
  }: let
    # theme is now defined inside mkConfig where color-lib is available
    systems = [
      "aarch64-linux"
      "x86_64-linux"
      "aarch64-darwin"
      #"i686-linux"
      #"x86_64-darwin"
    ];

    forAllSystems = nixpkgs.lib.genAttrs systems;

    inherit (self) outputs;

    #lib = nixpkgs.lib.extend (final: prev: home-manager.lib);
    inherit (nixpkgs) lib;

    inherit (lib) nixosSystem listToAttrs;

    # Unified configuration generator for hosts and images
    mkConfig = {
      hostname,
      user,
      system,
      extraModules ? [],
      extraConfigs ? {},
    }: let
      # Define color-lib and theme here where lib and system are known
      inherit (self.lib.${system}) math color-lib;
      # Pass color-lib and lib to the theme function
      theme = import ./theme.nix {inherit color-lib math lib;};

      mkSystem =
        if lib.strings.hasSuffix "darwin" system
        then inputs.nix-darwin.lib.darwinSystem
        else nixosSystem;
    in
      mkSystem {
        inherit system;
        specialArgs =
          {
            inherit
              self
              inputs # these are made somewhat redundant by 'self'
              outputs # ^
              hostname
              user
              lib
              system
              theme
              color-lib
              math
              ;
            upkgs = unstablePkgs system;
            # selfPkgs = self.packages.${system};
          }
          // extraConfigs;
        modules =
          [
            ./systems/${hostname}.nix

            # this gets generated by the commit message hook /.githooks/commit-msg
            ./systems/commit-messages/${hostname}-commit-message.nix
          ]
          ++ extraModules;
      };

    # Host configuration
    mkHost = hostname: user: system: {
      name = hostname;
      value = mkConfig {
        inherit hostname user system;
        # if darwin, add darwin modules.
        # extraModules = lib.mkIf (system == "aarch64-darwin" || system == "x86_64-darwin") [
        #   ./systems/modules/darwin.nix
        # ];
      };
    };

    mkImage = hostname: user: system: imageType: rec {
      name = "${hostname}-${imageType}";
      value =
        (mkConfig {
          inherit hostname user system;
          extraModules = [
            ./systems/modules/live-iso.nix # {inherit user;}
            {isoImage = {isoName = lib.mkForce name;};}
          ];
        }).config.system.build.isoImage;
    };

    # Import packages from the unstable Nixpkgs channel
    unstablePkgs = system:
      import nixpkgs-unstable {
        inherit system;
        config = {
          allowUnfree = true;
          android_sdk.accept_license = true;
        };
      };

    # Function to create package sets for a given system
    mkPkgs = system: let
      upkgs = unstablePkgs system;

      inherit (self.lib.${system}) math color-lib;

      # Pass color-lib and lib to the theme function
      theme = import ./theme.nix {inherit color-lib math lib self;};

      # Import packages from the stable Nixpkgs channel
      pkgs = import nixpkgs {
        inherit system;
        config = {
          allowUnfree = true;
          android_sdk.accept_license = true;
        };
      };
      # Import custom packages defined in the ./pkgs directory
      # i dont like pushing through my own lib as a dependency, makes it too self-reliant. but i really value the possibilities
    in
      import ./pkgs {
        inherit inputs self system pkgs upkgs lib color-lib math theme;
      };
  in {
    packages = forAllSystems mkPkgs;
    devShells = forAllSystems mkPkgs;

    nixosModules = import ./modules/nixos/default.nix;
    homeModules = import ./modules/home/default.nix;

    overlays = import ./overlays {inherit inputs;};

    lib =
      forAllSystems (system:
        import ./lib {inherit (import nixpkgs {inherit system;}) lib;});

    images =
      listToAttrs
      [(mkImage "framework13" "knoff" "x86_64-linux" "isoImage")];

    #darwinConfigurations = listToAttrs [
    #  (mkHost "Nicholass-MacBook-Pro" "nicolai" "aarch64-darwin")
    #];

    darwinConfigurations = listToAttrs [
      (mkHost "Nicholass-MacBook-Pro" "niko" "aarch64-darwin")
    ];
    #."Nicholass-MacBook-Pro" = let
    #   inherit (self.lib.aarch64-darwin) math color-lib;
    #   theme = import ./theme.nix {inherit color-lib math lib self;};
    # in
    #   inputs.nix-darwin.lib.darwinSystem rec {
    #     specialArgs = {inherit self color-lib inputs theme;};
    #     modules = [
    #       ./systems/Nicholass-MacBook-Pro.nix

    #       inputs.home-manager.darwinModules.home-manager
    #       {
    #         home-manager.useGlobalPkgs = true;
    #         home-manager.useUserPackages = true;
    #         home-manager.extraSpecialArgs = specialArgs;
    #         home-manager.users."niko" = import ./home/niko-darwin.nix;
    #       }
    #     ];
    #   };

    nixosConfigurations = listToAttrs [
      (mkHost "framework13" "knoff" "x86_64-linux")
      (mkHost "nuci5" "tv" "x86_64-linux")
      (mkHost "hetzner" "knoff" "x86_64-linux")
    ];
  };

  inputs = {
    # Nixpkgs
    nixpkgs.url = "github:nixos/nixpkgs/nixos-25.05";
    nixpkgs-unstable.url = "github:nixos/nixpkgs/nixos-unstable";

    # nix cli
    nixos-cli.url = "github:water-sucks/nixos";

    # Rust overlay
    rust-overlay.url = "github:oxalica/rust-overlay";

    # fenix
    fenix = {
      url = "github:nix-community/fenix";
      inputs.nixpkgs.follows = "nixpkgs-unstable";
    };

    # my custom website
    mywebsite.url = "github:knoc-off/Website";

    # Home Manager
    home-manager = {
      url = "github:nix-community/home-manager/release-25.05";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    nixvim.url = "github:nix-community/nixvim";
    nixneovimplugins.url = "github:NixNeovim/nixpkgs-vim-extra-plugins";

    # Hardware-specific configurations
    hardware.url = "github:nixos/nixos-hardware";

    # Disko - declarative disk partitioning
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Secure boot
    lanzaboote.url = "github:nix-community/lanzaboote";

    # NixOS generators
    nixos-generators = {
      url = "github:nix-community/nixos-generators";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Neovim config
    neovim = {
      url = "github:knoc-off/neovim-config";
      inputs.nixpkgs.follows = "nixpkgs-unstable";
    };

    # Firefox add-ons
    firefox-addons = {
      url = "gitlab:rycee/nur-expressions?dir=pkgs/firefox-addons";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    nixgl.url = "github:nix-community/nixGL";

    # Hyprland
    #hyprland.url = "github:hyprwm/hyprland";
    hyprland.url = "github:hyprwm/Hyprland";
    hyprland-plugins = {
      url = "github:hyprwm/hyprland-plugins";
      inputs.hyprland.follows = "hyprland";
    };

    # add ags / Widgets, etc.
    ags = {
      url = "github:aylur/ags";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    astal.url = "github:Aylur/astal";
    astal.inputs.nixpkgs.follows = "nixpkgs-unstable";

    # Secrets management
    sops-nix.url = "github:Mic92/sops-nix";

    # poetry2nix
    poetry2nix = {
      url = "github:nix-community/poetry2nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Minecraft servers and packages
    nix-minecraft.url = "github:Infinidoge/nix-minecraft";

    nix-darwin.url = "github:nix-darwin/nix-darwin/nix-darwin-25.05"; #  TODO update systems
    nix-darwin.inputs.nixpkgs.follows = "nixpkgs"; # TODO, maybe switch over to nixpkgs-darwin?
    # Non-Flake Inputs:

    firefox-csshacks = {
      url = "github:MrOtherGuy/firefox-csshacks";
      flake = false;
    };
  };

  nixConfig = {
    extra-substituters = ["https://nix-community.cachix.org"];
    extra-trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
      "hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="
    ];
  };
}
