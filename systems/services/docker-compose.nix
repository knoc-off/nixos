# Auto-generated using compose2nix v0.1.9.
{
  pkgs,
  lib,
  ...
}: {
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."wordpress-container-01-db" = {
    image = "mysql:5.7";
    environment = {
      MYSQL_DATABASE = "wordpress";
      MYSQL_PASSWORD = "wordpress";
      MYSQL_ROOT_PASSWORD = "somewordpress";
      MYSQL_USER = "wordpress";
    };
    volumes = [
      "db_data:/var/lib/mysql:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db"
      "--network=wordpress-container-01_default"
    ];
  };
  systemd.services."podman-wordpress-container-01-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-wordpress-container-01_default.service"
      "podman-volume-wordpress-container-01_db_data.service"
    ];
    requires = [
      "podman-network-wordpress-container-01_default.service"
      "podman-volume-wordpress-container-01_db_data.service"
    ];
    partOf = [
      "podman-compose-wordpress-container-01-root.target"
    ];
    wantedBy = [
      "podman-compose-wordpress-container-01-root.target"
    ];
  };
  virtualisation.oci-containers.containers."wordpress-container-01-wordpress" = {
    image = "wordpress:latest";
    environment = {
      WORDPRESS_DB_HOST = "db:3306";
      WORDPRESS_DB_NAME = "wordpress";
      WORDPRESS_DB_PASSWORD = "wordpress";
      WORDPRESS_DB_USER = "wordpress";
    };
    ports = [
      "8000:80/tcp"
    ];
    dependsOn = [
      "wordpress-container-01-db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=wordpress"
      "--network=wordpress-container-01_default"
    ];
  };
  systemd.services."podman-wordpress-container-01-wordpress" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-wordpress-container-01_default.service"
    ];
    requires = [
      "podman-network-wordpress-container-01_default.service"
    ];
    partOf = [
      "podman-compose-wordpress-container-01-root.target"
    ];
    unitConfig.UpheldBy = [
      "podman-wordpress-container-01-db.service"
    ];
    wantedBy = [
      "podman-compose-wordpress-container-01-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-wordpress-container-01_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.podman}/bin/podman network rm -f wordpress-container-01_default";
    };
    script = ''
      podman network inspect wordpress-container-01_default || podman network create wordpress-container-01_default
    '';
    partOf = ["podman-compose-wordpress-container-01-root.target"];
    wantedBy = ["podman-compose-wordpress-container-01-root.target"];
  };

  # Volumes
  systemd.services."podman-volume-wordpress-container-01_db_data" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect wordpress-container-01_db_data || podman volume create wordpress-container-01_db_data
    '';
    partOf = ["podman-compose-wordpress-container-01-root.target"];
    wantedBy = ["podman-compose-wordpress-container-01-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-wordpress-container-01-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
