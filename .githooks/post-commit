#!/usr/bin/env bash
# Script to update Nix system configuration labels based on commit messages.

SDIR="systems"                   # Directory containing Nix files
CDIR="$SDIR/commit-messages"     # Directory for commit messages
MAXLEN=200                       # Maximum length for combined message

mkdir -p "$CDIR"                 # Ensure commit message directory exists

# Function to process commit messages
process_msg() {
    local msg="$1" pad="$2"
    msg="${msg#"${msg%%[![:space:]]*}"}"          # Trim leading whitespace
    msg="${msg%"${msg##*[![:space:]]}"}"          # Trim trailing whitespace
    msg="${msg// /_}"                             # Replace spaces with underscores
    msg=$(echo "$msg" | tr -cd 'a-zA-Z0-9:_\.-')  # Remove disallowed characters
    [ ${#msg} -gt "$pad" ] && msg="${msg:0:$pad}" # Truncate if necessary
    printf "%-${pad}s" "$msg" | tr ' ' '_'        # Pad with underscores
}

# Get and process the global commit message
gmsg=$(git log -1 --pretty=%s)                    # Fetch global commit message
gmsg_len=${#gmsg}
[ "$gmsg_len" -gt "$MAXLEN" ] && gmsg_len=$MAXLEN
gmsg=$(process_msg "$gmsg" "$gmsg_len")           # Process global message

pad_amt=$((MAXLEN - gmsg_len))                    # Remaining length for file-specific message

# Process each Nix file in the systems directory
for f in "$SDIR"/*.nix; do
    [ -e "$f" ] || continue                       # Skip if no files match
    cmsg=$(git log -1 --pretty=%s -- "$f")        # Fetch file-specific commit message
    # Process file-specific message if space allows
    [ "$pad_amt" -gt 0 ] && fmsg=$(process_msg "$cmsg" "$pad_amt") || fmsg=""
    combo_msg="$fmsg$gmsg"                        # Combine messages
    fname="${f##*/}"                              # Extract filename
    cfile="$CDIR/${fname%.*}-commit-message.nix"  # Commit message file path
    # Write combined message to the commit message file
    printf "{\n  system.nixos.label = \"%s\";\n}" "$combo_msg" > "$cfile"
    # Stage the file if it has changes
    git diff --quiet "$cfile" || git add "$cfile"
done

# Amend the current commit to include staged changes if any
git diff --cached --quiet || git commit --amend --no-edit
